{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\emir_\\\\Desktop\\\\SightSort-master\\\\src\\\\SortVisualizer\\\\SortVisualizer.js\";\nimport React from \"react\";\nimport Selector from \"../components/Selector\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport RefreshIcon from \"@material-ui/icons/Autorenew\";\nimport SortIcon from \"@material-ui/icons/Sort\";\nimport * as Merge from \"../SortingAlgorithms/mergeSort.js\";\nimport * as Bubble from \"../SortingAlgorithms/bubbleSort.js\";\nimport * as Quick from \"../SortingAlgorithms/quickSort.js\";\nimport * as Select from \"../SortingAlgorithms/selectionSort.js\";\nimport * as Insert from \"../SortingAlgorithms/insertionSort.js\";\nimport Box from \"@material-ui/core/Box\";\nimport \"./SortVisualizer.css\"; //Constants & variables.\n\nexport const MAX_ARRAY_VALUE = 500;\nexport const MAIN_COLOUR = \"#4eccbf\";\nexport const HIGHLIGHT_COLOUR = \"#fad169\";\nexport const SPECIAL_HIGHLIGHT = \"#f0715d\";\nexport var ANIMATION_SPEED_MS = 5;\nconst FINISHED_GREEN = \"#8bc9a4\";\nvar currTab = 0; //Represents the index of the sorting tab that's currently selected.\n//Array size slider.\n\nconst PrettoSlider = withStyles({\n  root: {\n    color: \"#52af77\",\n    height: 8\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: \"#fff\",\n    border: \"2px solid currentColor\",\n    marginTop: -8,\n    marginLeft: -12,\n    \"&:focus, &:hover, &$active\": {\n      boxShadow: \"inherit\"\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: \"calc(-50% + 4px)\"\n  },\n  track: {\n    height: 8,\n    borderRadius: 4\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4\n  }\n})(Slider); //Beginning of SortVisualizer Class.\n\nexport default class SortVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSpeedSliderChange = (event, newValue) => {\n      ANIMATION_SPEED_MS = 200 / Math.pow(newValue / 5, 2);\n    };\n\n    this.handleArraySliderChange = (event, newValue) => {\n      this.setState({\n        currArraySize: newValue\n      });\n      this.refillArray(newValue);\n    };\n\n    this.handleNewArrayClick = event => {\n      this.refillArray(this.state.currArraySize);\n    };\n\n    this.handleSortClick = event => {\n      this.setState({\n        currentlyAnimating: true\n      }, () => this.beginSort());\n    };\n\n    this.state = {\n      currArraySize: 100,\n      array: [],\n      speed: 5,\n      currentlyAnimating: false //Represents whether or not a sorting algorithm is currently being animated.\n\n    };\n  } //Once components are rendered, fill the array randomly.\n\n\n  componentDidMount() {\n    this.refillArray(this.state.currArraySize);\n  } //Handle changing of the slider that controls the animation speed.\n\n\n  //Fills the array with 'currArraySize' random elements from 1 -> MAX_ARRAY_VALUE.\n  refillArray(length) {\n    const array = [];\n\n    for (let i = 0; i < length; i++) {\n      array.push(getRandomInt(1, MAX_ARRAY_VALUE));\n    } //Ensure that colours of the bars are back to normal upon fresh refill.\n\n\n    var arrayBars = document.getElementsByClassName(\"arrayBar\");\n\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = MAIN_COLOUR;\n    }\n\n    this.setState({\n      array\n    });\n  } //Sorting methods that call their respective animation methods.\n\n\n  async beginSort() {\n    var func;\n    if (currTab === 0) func = Quick.performVisualization;\n    if (currTab === 1) func = Merge.performVisualization;\n    if (currTab === 2) func = Insert.performVisualization;\n    if (currTab === 3) func = Bubble.performVisualization;\n    if (currTab === 4) func = Select.performVisualization;\n    await func(this.state.array); //Wait for the animation to finish\n\n    this.setState({\n      currentlyAnimating: false\n    }, () => this.flashGreen());\n  } //the flashing after finishing sorting\n\n\n  async flashGreen() {\n    var arrayBars = document.getElementsByClassName(\"arrayBar\");\n\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = FINISHED_GREEN;\n    } //Pause for a little bit.\n\n\n    await sleep(750); //Turn all the bars back to their original colour.\n\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = MAIN_COLOUR;\n    }\n  } //Beginning of render method.\n\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"100vh\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Selector, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"contentContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"speedSlider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"speedLabelWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 15\n      }\n    }, \"Speed\")), /*#__PURE__*/React.createElement(Slider, {\n      orientation: \"vertical\",\n      defaultValue: 50,\n      min: 5,\n      max: 100,\n      step: 0.01,\n      \"aria-label\": \"Speed\",\n      onChange: this.handleSpeedSliderChange,\n      disabled: this.state.currentlyAnimating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"sliderBtnsWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"arraySizeSlider\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 15\n      }\n    }, \"Array Size\"), /*#__PURE__*/React.createElement(PrettoSlider, {\n      valueLabelDisplay: \"auto\",\n      \"aria-label\": \"Array Size\",\n      defaultValue: 100,\n      min: 5,\n      max: 500,\n      onChange: this.handleArraySliderChange,\n      disabled: this.state.currentlyAnimating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 15\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btnsWrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"secondary\",\n      size: \"large\",\n      startIcon: /*#__PURE__*/React.createElement(RefreshIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 28\n        }\n      }),\n      className: \"mainBtn\",\n      onClick: this.handleNewArrayClick,\n      disabled: this.state.currentlyAnimating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"btnHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 17\n      }\n    }, \"Reset\")), /*#__PURE__*/React.createElement(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: \"large\",\n      startIcon: /*#__PURE__*/React.createElement(SortIcon, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 28\n        }\n      }),\n      className: \"mainBtn\",\n      onClick: this.handleSortClick,\n      disabled: this.state.currentlyAnimating,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      className: \"btnHeading\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 17\n      }\n    }, \"Sort\"))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"barContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }\n    }, array.map((value, index) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"arrayBar\",\n      key: index,\n      style: {\n        width: `${75 / array.length}%`,\n        height: `${value / (MAX_ARRAY_VALUE / 100)}%`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }))));\n  }\n\n} //Generates random integer within the interval [min, max].\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} //Sets the tab index so that the correct sorting method can be chosen.\n\n\nexport function setCurrTab(index) {\n  currTab = index;\n} //Pauses for a duration of the given ms.\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}","map":{"version":3,"sources":["C:/Users/emir_/Desktop/SightSort-master/src/SortVisualizer/SortVisualizer.js"],"names":["React","Selector","withStyles","Slider","Button","RefreshIcon","SortIcon","Merge","Bubble","Quick","Select","Insert","Box","MAX_ARRAY_VALUE","MAIN_COLOUR","HIGHLIGHT_COLOUR","SPECIAL_HIGHLIGHT","ANIMATION_SPEED_MS","FINISHED_GREEN","currTab","PrettoSlider","root","color","height","thumb","width","backgroundColor","border","marginTop","marginLeft","boxShadow","active","valueLabel","left","track","borderRadius","rail","SortVisualizer","Component","constructor","props","handleSpeedSliderChange","event","newValue","Math","pow","handleArraySliderChange","setState","currArraySize","refillArray","handleNewArrayClick","state","handleSortClick","currentlyAnimating","beginSort","array","speed","componentDidMount","length","i","push","getRandomInt","arrayBars","document","getElementsByClassName","style","func","performVisualization","flashGreen","sleep","render","map","value","index","min","max","floor","random","setCurrTab","ms","Promise","resolve","setTimeout"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Selector from \"../components/Selector\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Button from \"@material-ui/core/Button\";\nimport RefreshIcon from \"@material-ui/icons/Autorenew\";\nimport SortIcon from \"@material-ui/icons/Sort\";\nimport * as Merge from \"../SortingAlgorithms/mergeSort.js\";\nimport * as Bubble from \"../SortingAlgorithms/bubbleSort.js\";\nimport * as Quick from \"../SortingAlgorithms/quickSort.js\";\nimport * as Select from \"../SortingAlgorithms/selectionSort.js\";\nimport * as Insert from \"../SortingAlgorithms/insertionSort.js\";\nimport Box from \"@material-ui/core/Box\";\nimport \"./SortVisualizer.css\";\n\n//Constants & variables.\nexport const MAX_ARRAY_VALUE = 500;\nexport const MAIN_COLOUR = \"#4eccbf\";\nexport const HIGHLIGHT_COLOUR = \"#fad169\";\nexport const SPECIAL_HIGHLIGHT = \"#f0715d\";\nexport var ANIMATION_SPEED_MS = 5;\nconst FINISHED_GREEN = \"#8bc9a4\";\nvar currTab = 0; //Represents the index of the sorting tab that's currently selected.\n\n//Array size slider.\nconst PrettoSlider = withStyles({\n  root: {\n    color: \"#52af77\",\n    height: 8\n  },\n  thumb: {\n    height: 24,\n    width: 24,\n    backgroundColor: \"#fff\",\n    border: \"2px solid currentColor\",\n    marginTop: -8,\n    marginLeft: -12,\n    \"&:focus, &:hover, &$active\": {\n      boxShadow: \"inherit\"\n    }\n  },\n  active: {},\n  valueLabel: {\n    left: \"calc(-50% + 4px)\"\n  },\n  track: {\n    height: 8,\n    borderRadius: 4\n  },\n  rail: {\n    height: 8,\n    borderRadius: 4\n  }\n})(Slider);\n\n//Beginning of SortVisualizer Class.\nexport default class SortVisualizer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currArraySize: 100,\n      array: [],\n      speed: 5,\n      currentlyAnimating: false //Represents whether or not a sorting algorithm is currently being animated.\n    };\n  }\n  //Once components are rendered, fill the array randomly.\n  componentDidMount() {\n    this.refillArray(this.state.currArraySize);\n  }\n  //Handle changing of the slider that controls the animation speed.\n  handleSpeedSliderChange = (event, newValue) => {\n    ANIMATION_SPEED_MS = 200 / Math.pow(newValue / 5, 2);\n  };\n  //Handle changing of the slider that controls the array size.\n  handleArraySliderChange = (event, newValue) => {\n    this.setState({ currArraySize: newValue });\n    this.refillArray(newValue);\n  };\n  //Handle clicking of 'New Array' button.\n  handleNewArrayClick = event => {\n    this.refillArray(this.state.currArraySize);\n  };\n  //Handle clicking of 'Sort' button.\n  handleSortClick = event => {\n    this.setState({ currentlyAnimating: true }, () => this.beginSort());\n  };\n  //Fills the array with 'currArraySize' random elements from 1 -> MAX_ARRAY_VALUE.\n  refillArray(length) {\n    const array = [];\n    for (let i = 0; i < length; i++) {\n      array.push(getRandomInt(1, MAX_ARRAY_VALUE));\n    }\n    //Ensure that colours of the bars are back to normal upon fresh refill.\n    var arrayBars = document.getElementsByClassName(\"arrayBar\");\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = MAIN_COLOUR;\n    }\n    this.setState({ array });\n  }\n  //Sorting methods that call their respective animation methods.\n  async beginSort() {\n    var func;\n    if (currTab === 0) func = Quick.performVisualization;\n    if (currTab === 1) func = Merge.performVisualization;\n    if (currTab === 2) func = Insert.performVisualization;\n    if (currTab === 3) func = Bubble.performVisualization;\n    if (currTab === 4) func = Select.performVisualization;\n    await func(this.state.array); //Wait for the animation to finish\n    this.setState({ currentlyAnimating: false }, () => this.flashGreen());\n  }\n  //the flashing after finishing sorting\n  async flashGreen() {\n    var arrayBars = document.getElementsByClassName(\"arrayBar\");\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = FINISHED_GREEN;\n    }\n    //Pause for a little bit.\n    await sleep(750);\n    //Turn all the bars back to their original colour.\n    for (let i = 0; i < arrayBars.length; i++) {\n      arrayBars[i].style.backgroundColor = MAIN_COLOUR;\n    }\n  }\n  //Beginning of render method.\n  render() {\n    const { array } = this.state;\n    return (\n      <Box display=\"flex\" flexDirection=\"column\" height=\"100vh\">\n        <Selector />\n        <div className=\"contentContainer\">\n          <div className=\"speedSlider\">\n            <div className=\"speedLabelWrapper\">\n              <h3>Speed</h3>\n            </div>\n            <Slider\n              orientation=\"vertical\"\n              defaultValue={50}\n              min={5}\n              max={100}\n              step={0.01}\n              aria-label=\"Speed\"\n              onChange={this.handleSpeedSliderChange}\n              disabled={this.state.currentlyAnimating}\n            />\n          </div>\n          <div className=\"sliderBtnsWrapper\">\n            <div className=\"arraySizeSlider\">\n              <h3>Array Size</h3>\n              <PrettoSlider\n                valueLabelDisplay=\"auto\"\n                aria-label=\"Array Size\"\n                defaultValue={100}\n                min={5}\n                max={500}\n                onChange={this.handleArraySliderChange}\n                disabled={this.state.currentlyAnimating}\n              />\n            </div>\n            <div className=\"btnsWrapper\">\n              <Button\n                variant=\"contained\"\n                color=\"secondary\"\n                size=\"large\"\n                startIcon={<RefreshIcon />}\n                className=\"mainBtn\"\n                onClick={this.handleNewArrayClick}\n                disabled={this.state.currentlyAnimating}\n              >\n                <h3 className=\"btnHeading\">Reset</h3>\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"large\"\n                startIcon={<SortIcon />}\n                className=\"mainBtn\"\n                onClick={this.handleSortClick}\n                disabled={this.state.currentlyAnimating}\n              >\n                <h3 className=\"btnHeading\">Sort</h3>\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div className=\"barContainer\">\n          {array.map((value, index) => (\n            <div\n              className=\"arrayBar\"\n              key={index}\n              style={{\n                width: `${75 / array.length}%`,\n                height: `${value / (MAX_ARRAY_VALUE / 100)}%`\n              }}\n            ></div>\n          ))}\n        </div>\n      </Box>\n    );\n  }\n}\n//Generates random integer within the interval [min, max].\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n//Sets the tab index so that the correct sorting method can be chosen.\nexport function setCurrTab(index) {\n  currTab = index;\n}\n//Pauses for a duration of the given ms.\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"]},"metadata":{},"sourceType":"module"}