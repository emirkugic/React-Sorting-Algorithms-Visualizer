{"ast":null,"code":"import * as SV from \"../SortVisualizer/SortVisualizer.js\";\nexport function bubbleSort(array, visuals) {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      visuals.push([j, j + 1, \"v\"]);\n      visuals.push([j, j + 1, \"r\"]);\n\n      if (array[j] > array[j + 1]) {\n        visuals.push([j, array[j + 1], \"s\"]);\n        visuals.push([j + 1, array[j], \"s\"]);\n        var temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n    }\n  }\n}\nexport function performVisualization(array) {\n  const promises = [];\n  var visuals = [];\n  bubbleSort(array, visuals);\n  var arrayBars = document.getElementsByClassName(\"arrayBar\");\n\n  for (let i = 0; i < visuals.length; i++) {\n    var changeColour = visuals[i][2] === \"v\" || visuals[i][2] === \"r\";\n\n    if (changeColour) {\n      var [barOneIndex, barTwoIndex, key] = visuals[i];\n      const barOneStyle = arrayBars[barOneIndex].style;\n      const barTwoStyle = arrayBars[barTwoIndex].style;\n      let colour = key === \"v\" ? SV.HIGHLIGHT_COLOUR : SV.MAIN_COLOUR;\n      promises.push(new Promise(resolve => {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = colour;\n          barTwoStyle.backgroundColor = colour;\n          resolve();\n        }, i * SV.ANIMATION_SPEED_MS);\n      }));\n    } else {\n      promises.push(new Promise(resolve => {\n        setTimeout(() => {\n          var barOneIndex = visuals[i][0];\n          var newHeight = visuals[i][1];\n          var barOneStyle = arrayBars[barOneIndex].style;\n          barOneStyle.height = `${newHeight / (SV.MAX_ARRAY_VALUE / 100)}%`;\n          resolve();\n        }, i * SV.ANIMATION_SPEED_MS);\n      }));\n    }\n  }\n\n  return Promise.all(promises);\n}","map":{"version":3,"sources":["C:/Users/emir_/Desktop/SightSort-master/src/SortingAlgorithms/bubbleSort.js"],"names":["SV","bubbleSort","array","visuals","i","length","j","push","temp","performVisualization","promises","arrayBars","document","getElementsByClassName","changeColour","barOneIndex","barTwoIndex","key","barOneStyle","style","barTwoStyle","colour","HIGHLIGHT_COLOUR","MAIN_COLOUR","Promise","resolve","setTimeout","backgroundColor","ANIMATION_SPEED_MS","newHeight","height","MAX_ARRAY_VALUE","all"],"mappings":"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","sourcesContent":["import * as SV from \"../SortVisualizer/SortVisualizer.js\";\n\nexport function bubbleSort(array, visuals) {\n  for (let i = 0; i < array.length; i++) {\n    for (let j = 0; j < array.length - i - 1; j++) {\n      visuals.push([j, j + 1, \"v\"]);\n      visuals.push([j, j + 1, \"r\"]);\n      if (array[j] > array[j + 1]) {\n        visuals.push([j, array[j + 1], \"s\"]);\n        visuals.push([j + 1, array[j], \"s\"]);\n        var temp = array[j];\n        array[j] = array[j + 1];\n        array[j + 1] = temp;\n      }\n    }\n  }\n}\n\nexport function performVisualization(array) {\n  const promises = [];\n  var visuals = [];\n  bubbleSort(array, visuals);\n  var arrayBars = document.getElementsByClassName(\"arrayBar\");\n  for (let i = 0; i < visuals.length; i++) {\n    var changeColour = visuals[i][2] === \"v\" || visuals[i][2] === \"r\";\n    if (changeColour) {\n      var [barOneIndex, barTwoIndex, key] = visuals[i];\n      const barOneStyle = arrayBars[barOneIndex].style;\n      const barTwoStyle = arrayBars[barTwoIndex].style;\n      let colour = key === \"v\" ? SV.HIGHLIGHT_COLOUR : SV.MAIN_COLOUR;\n      promises.push(\n        new Promise(resolve => {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = colour;\n            barTwoStyle.backgroundColor = colour;\n            resolve();\n          }, i * SV.ANIMATION_SPEED_MS);\n        })\n      );\n    } else {\n      promises.push(\n        new Promise(resolve => {\n          setTimeout(() => {\n            var barOneIndex = visuals[i][0];\n            var newHeight = visuals[i][1];\n            var barOneStyle = arrayBars[barOneIndex].style;\n            barOneStyle.height = `${newHeight / (SV.MAX_ARRAY_VALUE / 100)}%`;\n            resolve();\n          }, i * SV.ANIMATION_SPEED_MS);\n        })\n      );\n    }\n  }\n  return Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}