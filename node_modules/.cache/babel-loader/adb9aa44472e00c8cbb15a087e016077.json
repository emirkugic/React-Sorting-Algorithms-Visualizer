{"ast":null,"code":"import * as SV from \"../SortVisualizer/SortVisualizer.js\";\nexport function mergeSort(arr, aux, low, high, visuals) {\n  if (low === high) return;\n  var mid = Math.floor((low + high) / 2);\n  mergeSort(aux, arr, low, mid, visuals);\n  mergeSort(aux, arr, mid + 1, high, visuals);\n  merge(arr, aux, low, mid, high, visuals);\n}\n\nfunction merge(arr, aux, low, mid, high, visuals) {\n  var i = low,\n      l = low,\n      r = mid + 1;\n\n  while (l <= mid && r <= high) {\n    visuals.push([l, r]);\n    visuals.push([l, r]);\n\n    if (aux[l] <= aux[r]) {\n      visuals.push([i, aux[l]]);\n      arr[i++] = aux[l++];\n    } else {\n      visuals.push([i, aux[r]]);\n      arr[i++] = aux[r++];\n    }\n  }\n\n  while (l <= mid) {\n    visuals.push([l, l]);\n    visuals.push([l, l]);\n    visuals.push([i, aux[l]]);\n    arr[i++] = aux[l++];\n  }\n\n  while (r <= high) {\n    visuals.push([r, r]);\n    visuals.push([r, r]);\n    visuals.push([i, aux[r]]);\n    arr[i++] = aux[r++];\n  }\n}\n\nexport function performVisualization(arr) {\n  const promises = []; //array of promises used to determine when visualization is complete\n\n  var visuals = [];\n  if (arr.length <= 1) return arr;\n  var aux = arr.slice();\n  mergeSort(arr, aux, 0, arr.length - 1, visuals);\n  var arrayBars = document.getElementsByClassName(\"arrayBar\");\n\n  for (let i = 0; i < visuals.length; i++) {\n    var changeColour = i % 3 !== 2;\n\n    if (changeColour) {\n      var [barOneIndex, barTwoIndex] = visuals[i];\n      const barOneStyle = arrayBars[barOneIndex].style;\n      const barTwoStyle = arrayBars[barTwoIndex].style;\n      let colour = i % 3 === 0 ? SV.HIGHLIGHT_COLOUR : SV.MAIN_COLOUR;\n      promises.push(new Promise(resolve => {\n        setTimeout(() => {\n          barOneStyle.backgroundColor = colour;\n          barTwoStyle.backgroundColor = colour;\n          resolve();\n        }, i * SV.ANIMATION_SPEED_MS);\n      }));\n    } else {\n      // In the case of a 'c', we want to change the height of the specified bar to be the new value.\n      promises.push(new Promise(resolve => {\n        setTimeout(() => {\n          var [barOneIndex, newHeight] = visuals[i];\n          var barOneStyle = arrayBars[barOneIndex].style;\n          barOneStyle.height = `${newHeight / (SV.MAX_ARRAY_VALUE / 100)}%`;\n          resolve();\n        }, i * SV.ANIMATION_SPEED_MS);\n      }));\n    }\n  }\n\n  return Promise.all(promises);\n}","map":{"version":3,"sources":["C:/Users/emir_/Desktop/SightSort-master/src/SortingAlgorithms/mergeSort.js"],"names":["SV","mergeSort","arr","aux","low","high","visuals","mid","Math","floor","merge","i","l","r","push","performVisualization","promises","length","slice","arrayBars","document","getElementsByClassName","changeColour","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","colour","HIGHLIGHT_COLOUR","MAIN_COLOUR","Promise","resolve","setTimeout","backgroundColor","ANIMATION_SPEED_MS","newHeight","height","MAX_ARRAY_VALUE","all"],"mappings":"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","sourcesContent":["import * as SV from \"../SortVisualizer/SortVisualizer.js\";\n\nexport function mergeSort(arr, aux, low, high, visuals) {\n  if (low === high) return;\n  var mid = Math.floor((low + high) / 2);\n  mergeSort(aux, arr, low, mid, visuals);\n  mergeSort(aux, arr, mid + 1, high, visuals);\n  merge(arr, aux, low, mid, high, visuals);\n}\n\nfunction merge(arr, aux, low, mid, high, visuals) {\n  var i = low,\n    l = low,\n    r = mid + 1;\n  while (l <= mid && r <= high) {\n    visuals.push([l, r]);\n    visuals.push([l, r]);\n    if (aux[l] <= aux[r]) {\n      visuals.push([i, aux[l]]);\n      arr[i++] = aux[l++];\n    } else {\n      visuals.push([i, aux[r]]);\n      arr[i++] = aux[r++];\n    }\n  }\n  while (l <= mid) {\n    visuals.push([l, l]);\n    visuals.push([l, l]);\n    visuals.push([i, aux[l]]);\n    arr[i++] = aux[l++];\n  }\n  while (r <= high) {\n    visuals.push([r, r]);\n    visuals.push([r, r]);\n    visuals.push([i, aux[r]]);\n    arr[i++] = aux[r++];\n  }\n}\n\nexport function performVisualization(arr) {\n  const promises = []; //array of promises used to determine when visualization is complete\n  var visuals = [];\n  if (arr.length <= 1) return arr;\n  var aux = arr.slice();\n  mergeSort(arr, aux, 0, arr.length - 1, visuals);\n  var arrayBars = document.getElementsByClassName(\"arrayBar\");\n  for (let i = 0; i < visuals.length; i++) {\n    var changeColour = i % 3 !== 2; \n    if (changeColour) {\n      var [barOneIndex, barTwoIndex] = visuals[i];\n      const barOneStyle = arrayBars[barOneIndex].style;\n      const barTwoStyle = arrayBars[barTwoIndex].style;\n      let colour = i % 3 === 0 ? SV.HIGHLIGHT_COLOUR : SV.MAIN_COLOUR;\n      promises.push(\n        new Promise(resolve => {\n          setTimeout(() => {\n            barOneStyle.backgroundColor = colour;\n            barTwoStyle.backgroundColor = colour;\n            resolve();\n          }, i * SV.ANIMATION_SPEED_MS);\n        })\n      );\n    } else {\n      // In the case of a 'c', we want to change the height of the specified bar to be the new value.\n      promises.push(\n        new Promise(resolve => {\n          setTimeout(() => {\n            var [barOneIndex, newHeight] = visuals[i];\n            var barOneStyle = arrayBars[barOneIndex].style;\n            barOneStyle.height = `${newHeight / (SV.MAX_ARRAY_VALUE / 100)}%`;\n            resolve();\n          }, i * SV.ANIMATION_SPEED_MS);\n        })\n      );\n    }\n  }\n  return Promise.all(promises);\n}\n"]},"metadata":{},"sourceType":"module"}